// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	paymentproviderevents "github.com/saltpay/settlements-payments-system/internal/domain/models"
	"github.com/saltpay/settlements-payments-system/internal/domain/validation"
	"sync"
)

// Ensure, that ValidatorMock does implement validation.Validator.
// If this is not the case, regenerate this file with moq.
var _ validation.Validator = &ValidatorMock{}

// ValidatorMock is a mock implementation of validation.Validator.
//
// 	func TestSomethingThatUsesValidator(t *testing.T) {
//
// 		// make and configure a mocked validation.Validator
// 		mockedValidator := &ValidatorMock{
// 			ValidateIncomingInstructionFunc: func(incomingInstruction paymentproviderevents.IncomingInstruction) validation.IncomingInstructionValidationResult {
// 				panic("mock out the ValidateIncomingInstruction method")
// 			},
// 		}
//
// 		// use mockedValidator in code that requires validation.Validator
// 		// and then make assertions.
//
// 	}
type ValidatorMock struct {
	// ValidateIncomingInstructionFunc mocks the ValidateIncomingInstruction method.
	ValidateIncomingInstructionFunc func(incomingInstruction paymentproviderevents.IncomingInstruction) validation.IncomingInstructionValidationResult

	// calls tracks calls to the methods.
	calls struct {
		// ValidateIncomingInstruction holds details about calls to the ValidateIncomingInstruction method.
		ValidateIncomingInstruction []struct {
			// IncomingInstruction is the incomingInstruction argument value.
			IncomingInstruction paymentproviderevents.IncomingInstruction
		}
	}
	lockValidateIncomingInstruction sync.RWMutex
}

// ValidateIncomingInstruction calls ValidateIncomingInstructionFunc.
func (mock *ValidatorMock) ValidateIncomingInstruction(incomingInstruction paymentproviderevents.IncomingInstruction) validation.IncomingInstructionValidationResult {
	if mock.ValidateIncomingInstructionFunc == nil {
		panic("ValidatorMock.ValidateIncomingInstructionFunc: method is nil but Validator.ValidateIncomingInstruction was just called")
	}
	callInfo := struct {
		IncomingInstruction paymentproviderevents.IncomingInstruction
	}{
		IncomingInstruction: incomingInstruction,
	}
	mock.lockValidateIncomingInstruction.Lock()
	mock.calls.ValidateIncomingInstruction = append(mock.calls.ValidateIncomingInstruction, callInfo)
	mock.lockValidateIncomingInstruction.Unlock()
	return mock.ValidateIncomingInstructionFunc(incomingInstruction)
}

// ValidateIncomingInstructionCalls gets all the calls that were made to ValidateIncomingInstruction.
// Check the length with:
//     len(mockedValidator.ValidateIncomingInstructionCalls())
func (mock *ValidatorMock) ValidateIncomingInstructionCalls() []struct {
	IncomingInstruction paymentproviderevents.IncomingInstruction
} {
	var calls []struct {
		IncomingInstruction paymentproviderevents.IncomingInstruction
	}
	mock.lockValidateIncomingInstruction.RLock()
	calls = mock.calls.ValidateIncomingInstruction
	mock.lockValidateIncomingInstruction.RUnlock()
	return calls
}
