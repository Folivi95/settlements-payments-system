// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	paymentproviderevents "github.com/saltpay/settlements-payments-system/internal/domain/models"
	"github.com/saltpay/settlements-payments-system/internal/domain/validation"
	"sync"
)

// Ensure, that PPEventValidatorMock does implement validation.PPEventValidator.
// If this is not the case, regenerate this file with moq.
var _ validation.PPEventValidator = &PPEventValidatorMock{}

// PPEventValidatorMock is a mock implementation of validation.PPEventValidator.
//
// 	func TestSomethingThatUsesPPEventValidator(t *testing.T) {
//
// 		// make and configure a mocked validation.PPEventValidator
// 		mockedPPEventValidator := &PPEventValidatorMock{
// 			ValidateFunc: func(paymentProviderEvent paymentproviderevents.PaymentProviderEvent) error {
// 				panic("mock out the Validate method")
// 			},
// 		}
//
// 		// use mockedPPEventValidator in code that requires validation.PPEventValidator
// 		// and then make assertions.
//
// 	}
type PPEventValidatorMock struct {
	// ValidateFunc mocks the Validate method.
	ValidateFunc func(paymentProviderEvent paymentproviderevents.PaymentProviderEvent) error

	// calls tracks calls to the methods.
	calls struct {
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// PaymentProviderEvent is the paymentProviderEvent argument value.
			PaymentProviderEvent paymentproviderevents.PaymentProviderEvent
		}
	}
	lockValidate sync.RWMutex
}

// Validate calls ValidateFunc.
func (mock *PPEventValidatorMock) Validate(paymentProviderEvent paymentproviderevents.PaymentProviderEvent) error {
	if mock.ValidateFunc == nil {
		panic("PPEventValidatorMock.ValidateFunc: method is nil but PPEventValidator.Validate was just called")
	}
	callInfo := struct {
		PaymentProviderEvent paymentproviderevents.PaymentProviderEvent
	}{
		PaymentProviderEvent: paymentProviderEvent,
	}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc(paymentProviderEvent)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//     len(mockedPPEventValidator.ValidateCalls())
func (mock *PPEventValidatorMock) ValidateCalls() []struct {
	PaymentProviderEvent paymentproviderevents.PaymentProviderEvent
} {
	var calls []struct {
		PaymentProviderEvent paymentproviderevents.PaymentProviderEvent
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
