// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/settlements-payments-system/internal/domain/models"
	"github.com/saltpay/settlements-payments-system/internal/domain/ports"
	"sync"
)

// Ensure, that MakePaymentMock does implement ports.MakePayment.
// If this is not the case, regenerate this file with moq.
var _ ports.MakePayment = &MakePaymentMock{}

// MakePaymentMock is a mock implementation of ports.MakePayment.
//
// 	func TestSomethingThatUsesMakePayment(t *testing.T) {
//
// 		// make and configure a mocked ports.MakePayment
// 		mockedMakePayment := &MakePaymentMock{
// 			ExecuteFunc: func(ctx context.Context, incomingInstruction models.IncomingInstruction) (models.PaymentInstructionID, error) {
// 				panic("mock out the Execute method")
// 			},
// 		}
//
// 		// use mockedMakePayment in code that requires ports.MakePayment
// 		// and then make assertions.
//
// 	}
type MakePaymentMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(ctx context.Context, incomingInstruction models.IncomingInstruction) (models.PaymentInstructionID, error)

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IncomingInstruction is the incomingInstruction argument value.
			IncomingInstruction models.IncomingInstruction
		}
	}
	lockExecute sync.RWMutex
}

// Execute calls ExecuteFunc.
func (mock *MakePaymentMock) Execute(ctx context.Context, incomingInstruction models.IncomingInstruction) (models.PaymentInstructionID, error) {
	if mock.ExecuteFunc == nil {
		panic("MakePaymentMock.ExecuteFunc: method is nil but MakePayment.Execute was just called")
	}
	callInfo := struct {
		Ctx                 context.Context
		IncomingInstruction models.IncomingInstruction
	}{
		Ctx:                 ctx,
		IncomingInstruction: incomingInstruction,
	}
	mock.lockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	mock.lockExecute.Unlock()
	return mock.ExecuteFunc(ctx, incomingInstruction)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//     len(mockedMakePayment.ExecuteCalls())
func (mock *MakePaymentMock) ExecuteCalls() []struct {
	Ctx                 context.Context
	IncomingInstruction models.IncomingInstruction
} {
	var calls []struct {
		Ctx                 context.Context
		IncomingInstruction models.IncomingInstruction
	}
	mock.lockExecute.RLock()
	calls = mock.calls.Execute
	mock.lockExecute.RUnlock()
	return calls
}
