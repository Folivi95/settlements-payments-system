// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/settlements-payments-system/internal/domain/models"
	"github.com/saltpay/settlements-payments-system/internal/domain/ports"
	"sync"
)

// Ensure, that PaymentExporterProducerMock does implement ports.PaymentExporterProducer.
// If this is not the case, regenerate this file with moq.
var _ ports.PaymentExporterProducer = &PaymentExporterProducerMock{}

// PaymentExporterProducerMock is a mock implementation of ports.PaymentExporterProducer.
//
// 	func TestSomethingThatUsesPaymentExporterProducer(t *testing.T) {
//
// 		// make and configure a mocked ports.PaymentExporterProducer
// 		mockedPaymentExporterProducer := &PaymentExporterProducerMock{
// 			ReportPaymentStatusFunc: func(ctx context.Context, ppEvent models.PaymentProviderEvent) error {
// 				panic("mock out the ReportPaymentStatus method")
// 			},
// 		}
//
// 		// use mockedPaymentExporterProducer in code that requires ports.PaymentExporterProducer
// 		// and then make assertions.
//
// 	}
type PaymentExporterProducerMock struct {
	// ReportPaymentStatusFunc mocks the ReportPaymentStatus method.
	ReportPaymentStatusFunc func(ctx context.Context, ppEvent models.PaymentProviderEvent) error

	// calls tracks calls to the methods.
	calls struct {
		// ReportPaymentStatus holds details about calls to the ReportPaymentStatus method.
		ReportPaymentStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PpEvent is the ppEvent argument value.
			PpEvent models.PaymentProviderEvent
		}
	}
	lockReportPaymentStatus sync.RWMutex
}

// ReportPaymentStatus calls ReportPaymentStatusFunc.
func (mock *PaymentExporterProducerMock) ReportPaymentStatus(ctx context.Context, ppEvent models.PaymentProviderEvent) error {
	if mock.ReportPaymentStatusFunc == nil {
		panic("PaymentExporterProducerMock.ReportPaymentStatusFunc: method is nil but PaymentExporterProducer.ReportPaymentStatus was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		PpEvent models.PaymentProviderEvent
	}{
		Ctx:     ctx,
		PpEvent: ppEvent,
	}
	mock.lockReportPaymentStatus.Lock()
	mock.calls.ReportPaymentStatus = append(mock.calls.ReportPaymentStatus, callInfo)
	mock.lockReportPaymentStatus.Unlock()
	return mock.ReportPaymentStatusFunc(ctx, ppEvent)
}

// ReportPaymentStatusCalls gets all the calls that were made to ReportPaymentStatus.
// Check the length with:
//     len(mockedPaymentExporterProducer.ReportPaymentStatusCalls())
func (mock *PaymentExporterProducerMock) ReportPaymentStatusCalls() []struct {
	Ctx     context.Context
	PpEvent models.PaymentProviderEvent
} {
	var calls []struct {
		Ctx     context.Context
		PpEvent models.PaymentProviderEvent
	}
	mock.lockReportPaymentStatus.RLock()
	calls = mock.calls.ReportPaymentStatus
	mock.lockReportPaymentStatus.RUnlock()
	return calls
}
