// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/saltpay/settlements-payments-system/internal/domain/models"
	"github.com/saltpay/settlements-payments-system/internal/domain/ports"
	"sync"
)

// Ensure, that PaymentProviderRetrieveBalanceMock does implement ports.PaymentProviderRetrieveBalance.
// If this is not the case, regenerate this file with moq.
var _ ports.PaymentProviderRetrieveBalance = &PaymentProviderRetrieveBalanceMock{}

// PaymentProviderRetrieveBalanceMock is a mock implementation of ports.PaymentProviderRetrieveBalance.
//
// 	func TestSomethingThatUsesPaymentProviderRetrieveBalance(t *testing.T) {
//
// 		// make and configure a mocked ports.PaymentProviderRetrieveBalance
// 		mockedPaymentProviderRetrieveBalance := &PaymentProviderRetrieveBalanceMock{
// 			RetrieveBalanceForCurrencyFunc: func(currency models.CurrencyCode, highRisk bool) (float64, float64, error) {
// 				panic("mock out the RetrieveBalanceForCurrency method")
// 			},
// 		}
//
// 		// use mockedPaymentProviderRetrieveBalance in code that requires ports.PaymentProviderRetrieveBalance
// 		// and then make assertions.
//
// 	}
type PaymentProviderRetrieveBalanceMock struct {
	// RetrieveBalanceForCurrencyFunc mocks the RetrieveBalanceForCurrency method.
	RetrieveBalanceForCurrencyFunc func(currency models.CurrencyCode, highRisk bool) (float64, float64, error)

	// calls tracks calls to the methods.
	calls struct {
		// RetrieveBalanceForCurrency holds details about calls to the RetrieveBalanceForCurrency method.
		RetrieveBalanceForCurrency []struct {
			// Currency is the currency argument value.
			Currency models.CurrencyCode
			// HighRisk is the highRisk argument value.
			HighRisk bool
		}
	}
	lockRetrieveBalanceForCurrency sync.RWMutex
}

// RetrieveBalanceForCurrency calls RetrieveBalanceForCurrencyFunc.
func (mock *PaymentProviderRetrieveBalanceMock) RetrieveBalanceForCurrency(currency models.CurrencyCode, highRisk bool) (float64, float64, error) {
	if mock.RetrieveBalanceForCurrencyFunc == nil {
		panic("PaymentProviderRetrieveBalanceMock.RetrieveBalanceForCurrencyFunc: method is nil but PaymentProviderRetrieveBalance.RetrieveBalanceForCurrency was just called")
	}
	callInfo := struct {
		Currency models.CurrencyCode
		HighRisk bool
	}{
		Currency: currency,
		HighRisk: highRisk,
	}
	mock.lockRetrieveBalanceForCurrency.Lock()
	mock.calls.RetrieveBalanceForCurrency = append(mock.calls.RetrieveBalanceForCurrency, callInfo)
	mock.lockRetrieveBalanceForCurrency.Unlock()
	return mock.RetrieveBalanceForCurrencyFunc(currency, highRisk)
}

// RetrieveBalanceForCurrencyCalls gets all the calls that were made to RetrieveBalanceForCurrency.
// Check the length with:
//     len(mockedPaymentProviderRetrieveBalance.RetrieveBalanceForCurrencyCalls())
func (mock *PaymentProviderRetrieveBalanceMock) RetrieveBalanceForCurrencyCalls() []struct {
	Currency models.CurrencyCode
	HighRisk bool
} {
	var calls []struct {
		Currency models.CurrencyCode
		HighRisk bool
	}
	mock.lockRetrieveBalanceForCurrency.RLock()
	calls = mock.calls.RetrieveBalanceForCurrency
	mock.lockRetrieveBalanceForCurrency.RUnlock()
	return calls
}
