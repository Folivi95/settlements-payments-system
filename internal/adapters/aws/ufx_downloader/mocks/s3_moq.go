// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/saltpay/settlements-payments-system/internal/adapters/aws/ufx_downloader"
	"sync"
)

// Ensure, that S3ClientMock does implement ufx_downloader.S3Client.
// If this is not the case, regenerate this file with moq.
var _ ufx_downloader.S3Client = &S3ClientMock{}

// S3ClientMock is a mock implementation of ufx_downloader.S3Client.
//
// 	func TestSomethingThatUsesS3Client(t *testing.T) {
//
// 		// make and configure a mocked ufx_downloader.S3Client
// 		mockedS3Client := &S3ClientMock{
// 			GetPresignedURLFunc: func(ctx context.Context, filename string) (string, error) {
// 				panic("mock out the GetPresignedURL method")
// 			},
// 			ListObjectsV2Func: func(ctx context.Context, prefix string) ([]*s3.Object, error) {
// 				panic("mock out the ListObjectsV2 method")
// 			},
// 		}
//
// 		// use mockedS3Client in code that requires ufx_downloader.S3Client
// 		// and then make assertions.
//
// 	}
type S3ClientMock struct {
	// GetPresignedURLFunc mocks the GetPresignedURL method.
	GetPresignedURLFunc func(ctx context.Context, filename string) (string, error)

	// ListObjectsV2Func mocks the ListObjectsV2 method.
	ListObjectsV2Func func(ctx context.Context, prefix string) ([]*s3.Object, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetPresignedURL holds details about calls to the GetPresignedURL method.
		GetPresignedURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filename is the filename argument value.
			Filename string
		}
		// ListObjectsV2 holds details about calls to the ListObjectsV2 method.
		ListObjectsV2 []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prefix is the prefix argument value.
			Prefix string
		}
	}
	lockGetPresignedURL sync.RWMutex
	lockListObjectsV2   sync.RWMutex
}

// GetPresignedURL calls GetPresignedURLFunc.
func (mock *S3ClientMock) GetPresignedURL(ctx context.Context, filename string) (string, error) {
	if mock.GetPresignedURLFunc == nil {
		panic("S3ClientMock.GetPresignedURLFunc: method is nil but S3Client.GetPresignedURL was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Filename string
	}{
		Ctx:      ctx,
		Filename: filename,
	}
	mock.lockGetPresignedURL.Lock()
	mock.calls.GetPresignedURL = append(mock.calls.GetPresignedURL, callInfo)
	mock.lockGetPresignedURL.Unlock()
	return mock.GetPresignedURLFunc(ctx, filename)
}

// GetPresignedURLCalls gets all the calls that were made to GetPresignedURL.
// Check the length with:
//     len(mockedS3Client.GetPresignedURLCalls())
func (mock *S3ClientMock) GetPresignedURLCalls() []struct {
	Ctx      context.Context
	Filename string
} {
	var calls []struct {
		Ctx      context.Context
		Filename string
	}
	mock.lockGetPresignedURL.RLock()
	calls = mock.calls.GetPresignedURL
	mock.lockGetPresignedURL.RUnlock()
	return calls
}

// ListObjectsV2 calls ListObjectsV2Func.
func (mock *S3ClientMock) ListObjectsV2(ctx context.Context, prefix string) ([]*s3.Object, error) {
	if mock.ListObjectsV2Func == nil {
		panic("S3ClientMock.ListObjectsV2Func: method is nil but S3Client.ListObjectsV2 was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Prefix string
	}{
		Ctx:    ctx,
		Prefix: prefix,
	}
	mock.lockListObjectsV2.Lock()
	mock.calls.ListObjectsV2 = append(mock.calls.ListObjectsV2, callInfo)
	mock.lockListObjectsV2.Unlock()
	return mock.ListObjectsV2Func(ctx, prefix)
}

// ListObjectsV2Calls gets all the calls that were made to ListObjectsV2.
// Check the length with:
//     len(mockedS3Client.ListObjectsV2Calls())
func (mock *S3ClientMock) ListObjectsV2Calls() []struct {
	Ctx    context.Context
	Prefix string
} {
	var calls []struct {
		Ctx    context.Context
		Prefix string
	}
	mock.lockListObjectsV2.RLock()
	calls = mock.calls.ListObjectsV2
	mock.lockListObjectsV2.RUnlock()
	return calls
}
