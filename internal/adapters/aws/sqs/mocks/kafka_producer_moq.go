// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/go-kafka-driver"
	"github.com/saltpay/settlements-payments-system/internal/adapters/kafka/producers"
	"sync"
)

// Ensure, that KafkaProducerMock does implement producers.KafkaProducer.
// If this is not the case, regenerate this file with moq.
var _ producers.KafkaProducer = &KafkaProducerMock{}

// KafkaProducerMock is a mock implementation of producers.KafkaProducer.
//
// 	func TestSomethingThatUsesKafkaProducer(t *testing.T) {
//
// 		// make and configure a mocked producers.KafkaProducer
// 		mockedKafkaProducer := &KafkaProducerMock{
// 			CloseFunc: func()  {
// 				panic("mock out the Close method")
// 			},
// 			WriteMessageFunc: func(ctx context.Context, msg kafka.Message) error {
// 				panic("mock out the WriteMessage method")
// 			},
// 		}
//
// 		// use mockedKafkaProducer in code that requires producers.KafkaProducer
// 		// and then make assertions.
//
// 	}
type KafkaProducerMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// WriteMessageFunc mocks the WriteMessage method.
	WriteMessageFunc func(ctx context.Context, msg kafka.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// WriteMessage holds details about calls to the WriteMessage method.
		WriteMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg kafka.Message
		}
	}
	lockClose        sync.RWMutex
	lockWriteMessage sync.RWMutex
}

// Close calls CloseFunc.
func (mock *KafkaProducerMock) Close() {
	if mock.CloseFunc == nil {
		panic("KafkaProducerMock.CloseFunc: method is nil but KafkaProducer.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedKafkaProducer.CloseCalls())
func (mock *KafkaProducerMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// WriteMessage calls WriteMessageFunc.
func (mock *KafkaProducerMock) WriteMessage(ctx context.Context, msg kafka.Message) error {
	if mock.WriteMessageFunc == nil {
		panic("KafkaProducerMock.WriteMessageFunc: method is nil but KafkaProducer.WriteMessage was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Msg kafka.Message
	}{
		Ctx: ctx,
		Msg: msg,
	}
	mock.lockWriteMessage.Lock()
	mock.calls.WriteMessage = append(mock.calls.WriteMessage, callInfo)
	mock.lockWriteMessage.Unlock()
	return mock.WriteMessageFunc(ctx, msg)
}

// WriteMessageCalls gets all the calls that were made to WriteMessage.
// Check the length with:
//     len(mockedKafkaProducer.WriteMessageCalls())
func (mock *KafkaProducerMock) WriteMessageCalls() []struct {
	Ctx context.Context
	Msg kafka.Message
} {
	var calls []struct {
		Ctx context.Context
		Msg kafka.Message
	}
	mock.lockWriteMessage.RLock()
	calls = mock.calls.WriteMessage
	mock.lockWriteMessage.RUnlock()
	return calls
}
