// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	awssqs "github.com/aws/aws-sdk-go/service/sqs"
	"github.com/saltpay/settlements-payments-system/internal/adapters/aws/sqs"
	"sync"
)

// Ensure, that QueueMock does implement sqs.Queue.
// If this is not the case, regenerate this file with moq.
var _ sqs.Queue = &QueueMock{}

// QueueMock is a mock implementation of sqs.Queue.
//
// 	func TestSomethingThatUsesQueue(t *testing.T) {
//
// 		// make and configure a mocked sqs.Queue
// 		mockedQueue := &QueueMock{
// 			AttributesFunc: func(contextMoqParam context.Context) (sqs.QueueAttributes, error) {
// 				panic("mock out the Attributes method")
// 			},
// 			DeleteMessageFunc: func(ctx context.Context, messageHandle string) error {
// 				panic("mock out the DeleteMessage method")
// 			},
// 			GetMessagesFunc: func(contextMoqParam context.Context) (*awssqs.ReceiveMessageOutput, error) {
// 				panic("mock out the GetMessages method")
// 			},
// 			PeekAllMessagesFunc: func(contextMoqParam context.Context) (sqs.DLQInformation, error) {
// 				panic("mock out the PeekAllMessages method")
// 			},
// 			PurgeFunc: func(contextMoqParam context.Context) error {
// 				panic("mock out the Purge method")
// 			},
// 			SendMessageFunc: func(contextMoqParam context.Context, s string) error {
// 				panic("mock out the SendMessage method")
// 			},
// 		}
//
// 		// use mockedQueue in code that requires sqs.Queue
// 		// and then make assertions.
//
// 	}
type QueueMock struct {
	// AttributesFunc mocks the Attributes method.
	AttributesFunc func(contextMoqParam context.Context) (sqs.QueueAttributes, error)

	// DeleteMessageFunc mocks the DeleteMessage method.
	DeleteMessageFunc func(ctx context.Context, messageHandle string) error

	// GetMessagesFunc mocks the GetMessages method.
	GetMessagesFunc func(contextMoqParam context.Context) (*awssqs.ReceiveMessageOutput, error)

	// PeekAllMessagesFunc mocks the PeekAllMessages method.
	PeekAllMessagesFunc func(contextMoqParam context.Context) (sqs.DLQInformation, error)

	// PurgeFunc mocks the Purge method.
	PurgeFunc func(contextMoqParam context.Context) error

	// SendMessageFunc mocks the SendMessage method.
	SendMessageFunc func(contextMoqParam context.Context, s string) error

	// calls tracks calls to the methods.
	calls struct {
		// Attributes holds details about calls to the Attributes method.
		Attributes []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// DeleteMessage holds details about calls to the DeleteMessage method.
		DeleteMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageHandle is the messageHandle argument value.
			MessageHandle string
		}
		// GetMessages holds details about calls to the GetMessages method.
		GetMessages []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// PeekAllMessages holds details about calls to the PeekAllMessages method.
		PeekAllMessages []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Purge holds details about calls to the Purge method.
		Purge []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// SendMessage holds details about calls to the SendMessage method.
		SendMessage []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
	}
	lockAttributes      sync.RWMutex
	lockDeleteMessage   sync.RWMutex
	lockGetMessages     sync.RWMutex
	lockPeekAllMessages sync.RWMutex
	lockPurge           sync.RWMutex
	lockSendMessage     sync.RWMutex
}

// Attributes calls AttributesFunc.
func (mock *QueueMock) Attributes(contextMoqParam context.Context) (sqs.QueueAttributes, error) {
	if mock.AttributesFunc == nil {
		panic("QueueMock.AttributesFunc: method is nil but Queue.Attributes was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockAttributes.Lock()
	mock.calls.Attributes = append(mock.calls.Attributes, callInfo)
	mock.lockAttributes.Unlock()
	return mock.AttributesFunc(contextMoqParam)
}

// AttributesCalls gets all the calls that were made to Attributes.
// Check the length with:
//     len(mockedQueue.AttributesCalls())
func (mock *QueueMock) AttributesCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockAttributes.RLock()
	calls = mock.calls.Attributes
	mock.lockAttributes.RUnlock()
	return calls
}

// DeleteMessage calls DeleteMessageFunc.
func (mock *QueueMock) DeleteMessage(ctx context.Context, messageHandle string) error {
	if mock.DeleteMessageFunc == nil {
		panic("QueueMock.DeleteMessageFunc: method is nil but Queue.DeleteMessage was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		MessageHandle string
	}{
		Ctx:           ctx,
		MessageHandle: messageHandle,
	}
	mock.lockDeleteMessage.Lock()
	mock.calls.DeleteMessage = append(mock.calls.DeleteMessage, callInfo)
	mock.lockDeleteMessage.Unlock()
	return mock.DeleteMessageFunc(ctx, messageHandle)
}

// DeleteMessageCalls gets all the calls that were made to DeleteMessage.
// Check the length with:
//     len(mockedQueue.DeleteMessageCalls())
func (mock *QueueMock) DeleteMessageCalls() []struct {
	Ctx           context.Context
	MessageHandle string
} {
	var calls []struct {
		Ctx           context.Context
		MessageHandle string
	}
	mock.lockDeleteMessage.RLock()
	calls = mock.calls.DeleteMessage
	mock.lockDeleteMessage.RUnlock()
	return calls
}

// GetMessages calls GetMessagesFunc.
func (mock *QueueMock) GetMessages(contextMoqParam context.Context) (*awssqs.ReceiveMessageOutput, error) {
	if mock.GetMessagesFunc == nil {
		panic("QueueMock.GetMessagesFunc: method is nil but Queue.GetMessages was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockGetMessages.Lock()
	mock.calls.GetMessages = append(mock.calls.GetMessages, callInfo)
	mock.lockGetMessages.Unlock()
	return mock.GetMessagesFunc(contextMoqParam)
}

// GetMessagesCalls gets all the calls that were made to GetMessages.
// Check the length with:
//     len(mockedQueue.GetMessagesCalls())
func (mock *QueueMock) GetMessagesCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockGetMessages.RLock()
	calls = mock.calls.GetMessages
	mock.lockGetMessages.RUnlock()
	return calls
}

// PeekAllMessages calls PeekAllMessagesFunc.
func (mock *QueueMock) PeekAllMessages(contextMoqParam context.Context) (sqs.DLQInformation, error) {
	if mock.PeekAllMessagesFunc == nil {
		panic("QueueMock.PeekAllMessagesFunc: method is nil but Queue.PeekAllMessages was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockPeekAllMessages.Lock()
	mock.calls.PeekAllMessages = append(mock.calls.PeekAllMessages, callInfo)
	mock.lockPeekAllMessages.Unlock()
	return mock.PeekAllMessagesFunc(contextMoqParam)
}

// PeekAllMessagesCalls gets all the calls that were made to PeekAllMessages.
// Check the length with:
//     len(mockedQueue.PeekAllMessagesCalls())
func (mock *QueueMock) PeekAllMessagesCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockPeekAllMessages.RLock()
	calls = mock.calls.PeekAllMessages
	mock.lockPeekAllMessages.RUnlock()
	return calls
}

// Purge calls PurgeFunc.
func (mock *QueueMock) Purge(contextMoqParam context.Context) error {
	if mock.PurgeFunc == nil {
		panic("QueueMock.PurgeFunc: method is nil but Queue.Purge was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockPurge.Lock()
	mock.calls.Purge = append(mock.calls.Purge, callInfo)
	mock.lockPurge.Unlock()
	return mock.PurgeFunc(contextMoqParam)
}

// PurgeCalls gets all the calls that were made to Purge.
// Check the length with:
//     len(mockedQueue.PurgeCalls())
func (mock *QueueMock) PurgeCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockPurge.RLock()
	calls = mock.calls.Purge
	mock.lockPurge.RUnlock()
	return calls
}

// SendMessage calls SendMessageFunc.
func (mock *QueueMock) SendMessage(contextMoqParam context.Context, s string) error {
	if mock.SendMessageFunc == nil {
		panic("QueueMock.SendMessageFunc: method is nil but Queue.SendMessage was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockSendMessage.Lock()
	mock.calls.SendMessage = append(mock.calls.SendMessage, callInfo)
	mock.lockSendMessage.Unlock()
	return mock.SendMessageFunc(contextMoqParam, s)
}

// SendMessageCalls gets all the calls that were made to SendMessage.
// Check the length with:
//     len(mockedQueue.SendMessageCalls())
func (mock *QueueMock) SendMessageCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockSendMessage.RLock()
	calls = mock.calls.SendMessage
	mock.lockSendMessage.RUnlock()
	return calls
}
