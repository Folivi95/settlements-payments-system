// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/settlements-payments-system/internal/domain/models"
	"github.com/saltpay/settlements-payments-system/internal/domain/ports"
	"sync"
)

// Ensure, that UpdatePaymentStateMock does implement ports.UpdatePaymentState.
// If this is not the case, regenerate this file with moq.
var _ ports.UpdatePaymentState = &UpdatePaymentStateMock{}

// UpdatePaymentStateMock is a mock implementation of ports.UpdatePaymentState.
//
// 	func TestSomethingThatUsesUpdatePaymentState(t *testing.T) {
//
// 		// make and configure a mocked ports.UpdatePaymentState
// 		mockedUpdatePaymentState := &UpdatePaymentStateMock{
// 			ExecuteFunc: func(ctx context.Context, paymentInstructionID string, state models.PaymentInstructionStatus, event models.PaymentInstructionEvent) error {
// 				panic("mock out the Execute method")
// 			},
// 		}
//
// 		// use mockedUpdatePaymentState in code that requires ports.UpdatePaymentState
// 		// and then make assertions.
//
// 	}
type UpdatePaymentStateMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(ctx context.Context, paymentInstructionID string, state models.PaymentInstructionStatus, event models.PaymentInstructionEvent) error

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PaymentInstructionID is the paymentInstructionID argument value.
			PaymentInstructionID string
			// State is the state argument value.
			State models.PaymentInstructionStatus
			// Event is the event argument value.
			Event models.PaymentInstructionEvent
		}
	}
	lockExecute sync.RWMutex
}

// Execute calls ExecuteFunc.
func (mock *UpdatePaymentStateMock) Execute(ctx context.Context, paymentInstructionID string, state models.PaymentInstructionStatus, event models.PaymentInstructionEvent) error {
	if mock.ExecuteFunc == nil {
		panic("UpdatePaymentStateMock.ExecuteFunc: method is nil but UpdatePaymentState.Execute was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		PaymentInstructionID string
		State                models.PaymentInstructionStatus
		Event                models.PaymentInstructionEvent
	}{
		Ctx:                  ctx,
		PaymentInstructionID: paymentInstructionID,
		State:                state,
		Event:                event,
	}
	mock.lockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	mock.lockExecute.Unlock()
	return mock.ExecuteFunc(ctx, paymentInstructionID, state, event)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//     len(mockedUpdatePaymentState.ExecuteCalls())
func (mock *UpdatePaymentStateMock) ExecuteCalls() []struct {
	Ctx                  context.Context
	PaymentInstructionID string
	State                models.PaymentInstructionStatus
	Event                models.PaymentInstructionEvent
} {
	var calls []struct {
		Ctx                  context.Context
		PaymentInstructionID string
		State                models.PaymentInstructionStatus
		Event                models.PaymentInstructionEvent
	}
	mock.lockExecute.RLock()
	calls = mock.calls.Execute
	mock.lockExecute.RUnlock()
	return calls
}
