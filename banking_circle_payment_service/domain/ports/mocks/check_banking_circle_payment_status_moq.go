// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/settlements-payments-system/banking_circle_payment_service/domain/ports"
	ppEvents "github.com/saltpay/settlements-payments-system/internal/domain/models"
	"sync"
	"time"
)

// Ensure, that CheckBankingCirclePaymentStatusMock does implement ports.CheckBankingCirclePaymentStatus.
// If this is not the case, regenerate this file with moq.
var _ ports.CheckBankingCirclePaymentStatus = &CheckBankingCirclePaymentStatusMock{}

// CheckBankingCirclePaymentStatusMock is a mock implementation of ports.CheckBankingCirclePaymentStatus.
//
// 	func TestSomethingThatUsesCheckBankingCirclePaymentStatus(t *testing.T) {
//
// 		// make and configure a mocked ports.CheckBankingCirclePaymentStatus
// 		mockedCheckBankingCirclePaymentStatus := &CheckBankingCirclePaymentStatusMock{
// 			ExecuteFunc: func(ctx context.Context, instruction ppEvents.PaymentInstruction, providerPaymentID ppEvents.ProviderPaymentID, bankingReference ppEvents.BankingReference, start time.Time) error {
// 				panic("mock out the Execute method")
// 			},
// 		}
//
// 		// use mockedCheckBankingCirclePaymentStatus in code that requires ports.CheckBankingCirclePaymentStatus
// 		// and then make assertions.
//
// 	}
type CheckBankingCirclePaymentStatusMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(ctx context.Context, instruction ppEvents.PaymentInstruction, providerPaymentID ppEvents.ProviderPaymentID, bankingReference ppEvents.BankingReference, start time.Time) error

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Instruction is the instruction argument value.
			Instruction ppEvents.PaymentInstruction
			// ProviderPaymentID is the providerPaymentID argument value.
			ProviderPaymentID ppEvents.ProviderPaymentID
			// BankingReference is the bankingReference argument value.
			BankingReference ppEvents.BankingReference
			// Start is the start argument value.
			Start time.Time
		}
	}
	lockExecute sync.RWMutex
}

// Execute calls ExecuteFunc.
func (mock *CheckBankingCirclePaymentStatusMock) Execute(ctx context.Context, instruction ppEvents.PaymentInstruction, providerPaymentID ppEvents.ProviderPaymentID, bankingReference ppEvents.BankingReference, start time.Time) error {
	if mock.ExecuteFunc == nil {
		panic("CheckBankingCirclePaymentStatusMock.ExecuteFunc: method is nil but CheckBankingCirclePaymentStatus.Execute was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Instruction       ppEvents.PaymentInstruction
		ProviderPaymentID ppEvents.ProviderPaymentID
		BankingReference  ppEvents.BankingReference
		Start             time.Time
	}{
		Ctx:               ctx,
		Instruction:       instruction,
		ProviderPaymentID: providerPaymentID,
		BankingReference:  bankingReference,
		Start:             start,
	}
	mock.lockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	mock.lockExecute.Unlock()
	return mock.ExecuteFunc(ctx, instruction, providerPaymentID, bankingReference, start)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//     len(mockedCheckBankingCirclePaymentStatus.ExecuteCalls())
func (mock *CheckBankingCirclePaymentStatusMock) ExecuteCalls() []struct {
	Ctx               context.Context
	Instruction       ppEvents.PaymentInstruction
	ProviderPaymentID ppEvents.ProviderPaymentID
	BankingReference  ppEvents.BankingReference
	Start             time.Time
} {
	var calls []struct {
		Ctx               context.Context
		Instruction       ppEvents.PaymentInstruction
		ProviderPaymentID ppEvents.ProviderPaymentID
		BankingReference  ppEvents.BankingReference
		Start             time.Time
	}
	mock.lockExecute.RLock()
	calls = mock.calls.Execute
	mock.lockExecute.RUnlock()
	return calls
}
