// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/saltpay/settlements-payments-system/banking_circle_payment_service/domain/ports"
	"sync"
)

// Ensure, that RetrieveBankingCircleAccountFundsMock does implement ports.RetrieveBankingCircleAccountFunds.
// If this is not the case, regenerate this file with moq.
var _ ports.RetrieveBankingCircleAccountFunds = &RetrieveBankingCircleAccountFundsMock{}

// RetrieveBankingCircleAccountFundsMock is a mock implementation of ports.RetrieveBankingCircleAccountFunds.
//
// 	func TestSomethingThatUsesRetrieveBankingCircleAccountFunds(t *testing.T) {
//
// 		// make and configure a mocked ports.RetrieveBankingCircleAccountFunds
// 		mockedRetrieveBankingCircleAccountFunds := &RetrieveBankingCircleAccountFundsMock{
// 			ExecuteFunc: func(currency string, highRisk bool) (float64, float64, error) {
// 				panic("mock out the Execute method")
// 			},
// 		}
//
// 		// use mockedRetrieveBankingCircleAccountFunds in code that requires ports.RetrieveBankingCircleAccountFunds
// 		// and then make assertions.
//
// 	}
type RetrieveBankingCircleAccountFundsMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(currency string, highRisk bool) (float64, float64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Currency is the currency argument value.
			Currency string
			// HighRisk is the highRisk argument value.
			HighRisk bool
		}
	}
	lockExecute sync.RWMutex
}

// Execute calls ExecuteFunc.
func (mock *RetrieveBankingCircleAccountFundsMock) Execute(currency string, highRisk bool) (float64, float64, error) {
	if mock.ExecuteFunc == nil {
		panic("RetrieveBankingCircleAccountFundsMock.ExecuteFunc: method is nil but RetrieveBankingCircleAccountFunds.Execute was just called")
	}
	callInfo := struct {
		Currency string
		HighRisk bool
	}{
		Currency: currency,
		HighRisk: highRisk,
	}
	mock.lockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	mock.lockExecute.Unlock()
	return mock.ExecuteFunc(currency, highRisk)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//     len(mockedRetrieveBankingCircleAccountFunds.ExecuteCalls())
func (mock *RetrieveBankingCircleAccountFundsMock) ExecuteCalls() []struct {
	Currency string
	HighRisk bool
} {
	var calls []struct {
		Currency string
		HighRisk bool
	}
	mock.lockExecute.RLock()
	calls = mock.calls.Execute
	mock.lockExecute.RUnlock()
	return calls
}
