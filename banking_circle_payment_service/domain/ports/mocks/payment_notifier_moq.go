// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/settlements-payments-system/banking_circle_payment_service/domain/ports"
	ppEvents "github.com/saltpay/settlements-payments-system/internal/domain/models"
	"sync"
)

// Ensure, that PaymentNotifierMock does implement ports.PaymentNotifier.
// If this is not the case, regenerate this file with moq.
var _ ports.PaymentNotifier = &PaymentNotifierMock{}

// PaymentNotifierMock is a mock implementation of ports.PaymentNotifier.
//
// 	func TestSomethingThatUsesPaymentNotifier(t *testing.T) {
//
// 		// make and configure a mocked ports.PaymentNotifier
// 		mockedPaymentNotifier := &PaymentNotifierMock{
// 			SendPaymentStatusFunc: func(ctx context.Context, event ppEvents.PaymentProviderEvent) error {
// 				panic("mock out the SendPaymentStatus method")
// 			},
// 		}
//
// 		// use mockedPaymentNotifier in code that requires ports.PaymentNotifier
// 		// and then make assertions.
//
// 	}
type PaymentNotifierMock struct {
	// SendPaymentStatusFunc mocks the SendPaymentStatus method.
	SendPaymentStatusFunc func(ctx context.Context, event ppEvents.PaymentProviderEvent) error

	// calls tracks calls to the methods.
	calls struct {
		// SendPaymentStatus holds details about calls to the SendPaymentStatus method.
		SendPaymentStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Event is the event argument value.
			Event ppEvents.PaymentProviderEvent
		}
	}
	lockSendPaymentStatus sync.RWMutex
}

// SendPaymentStatus calls SendPaymentStatusFunc.
func (mock *PaymentNotifierMock) SendPaymentStatus(ctx context.Context, event ppEvents.PaymentProviderEvent) error {
	if mock.SendPaymentStatusFunc == nil {
		panic("PaymentNotifierMock.SendPaymentStatusFunc: method is nil but PaymentNotifier.SendPaymentStatus was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Event ppEvents.PaymentProviderEvent
	}{
		Ctx:   ctx,
		Event: event,
	}
	mock.lockSendPaymentStatus.Lock()
	mock.calls.SendPaymentStatus = append(mock.calls.SendPaymentStatus, callInfo)
	mock.lockSendPaymentStatus.Unlock()
	return mock.SendPaymentStatusFunc(ctx, event)
}

// SendPaymentStatusCalls gets all the calls that were made to SendPaymentStatus.
// Check the length with:
//     len(mockedPaymentNotifier.SendPaymentStatusCalls())
func (mock *PaymentNotifierMock) SendPaymentStatusCalls() []struct {
	Ctx   context.Context
	Event ppEvents.PaymentProviderEvent
} {
	var calls []struct {
		Ctx   context.Context
		Event ppEvents.PaymentProviderEvent
	}
	mock.lockSendPaymentStatus.RLock()
	calls = mock.calls.SendPaymentStatus
	mock.lockSendPaymentStatus.RUnlock()
	return calls
}
