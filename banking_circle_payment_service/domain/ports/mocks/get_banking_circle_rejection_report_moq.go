// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	models2 "github.com/saltpay/settlements-payments-system/banking_circle_payment_service/domain/models"
	"github.com/saltpay/settlements-payments-system/banking_circle_payment_service/domain/ports"
	"sync"
)

// Ensure, that GetBankingCircleRejectionReportMock does implement ports.GetBankingCircleRejectionReport.
// If this is not the case, regenerate this file with moq.
var _ ports.GetBankingCircleRejectionReport = &GetBankingCircleRejectionReportMock{}

// GetBankingCircleRejectionReportMock is a mock implementation of ports.GetBankingCircleRejectionReport.
//
// 	func TestSomethingThatUsesGetBankingCircleRejectionReport(t *testing.T) {
//
// 		// make and configure a mocked ports.GetBankingCircleRejectionReport
// 		mockedGetBankingCircleRejectionReport := &GetBankingCircleRejectionReportMock{
// 			ExecuteFunc: func(date string) (models2.RejectionReport, error) {
// 				panic("mock out the Execute method")
// 			},
// 		}
//
// 		// use mockedGetBankingCircleRejectionReport in code that requires ports.GetBankingCircleRejectionReport
// 		// and then make assertions.
//
// 	}
type GetBankingCircleRejectionReportMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(date string) (models2.RejectionReport, error)

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Date is the date argument value.
			Date string
		}
	}
	lockExecute sync.RWMutex
}

// Execute calls ExecuteFunc.
func (mock *GetBankingCircleRejectionReportMock) Execute(date string) (models2.RejectionReport, error) {
	if mock.ExecuteFunc == nil {
		panic("GetBankingCircleRejectionReportMock.ExecuteFunc: method is nil but GetBankingCircleRejectionReport.Execute was just called")
	}
	callInfo := struct {
		Date string
	}{
		Date: date,
	}
	mock.lockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	mock.lockExecute.Unlock()
	return mock.ExecuteFunc(date)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//     len(mockedGetBankingCircleRejectionReport.ExecuteCalls())
func (mock *GetBankingCircleRejectionReportMock) ExecuteCalls() []struct {
	Date string
} {
	var calls []struct {
		Date string
	}
	mock.lockExecute.RLock()
	calls = mock.calls.Execute
	mock.lockExecute.RUnlock()
	return calls
}
